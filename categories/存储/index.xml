<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>存储 on 人生如逆旅，我亦是行人。</title><link>https://xiking.win/categories/%E5%AD%98%E5%82%A8/</link><description>Recent content in 存储 on 人生如逆旅，我亦是行人。</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>yongman</copyright><lastBuildDate>Tue, 21 Apr 2020 01:00:00 +0000</lastBuildDate><atom:link href="https://xiking.win/categories/%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>记一次Redis超时抖动问题排查</title><link>https://xiking.win/2020/04/21/redis-request-time-cost-troubleshoot/</link><pubDate>Tue, 21 Apr 2020 01:00:00 +0000</pubDate><guid>https://xiking.win/2020/04/21/redis-request-time-cost-troubleshoot/</guid><description>1. 问题现象 业务客户端请求Redis集群客户端看经常出现30-70ms的超时抖动，而执行的命令都是O(1)的复杂度，预期正常返回在0.1ms内</description></item><item><title>再看Redis数据过期</title><link>https://xiking.win/2020/04/01/redis-expire-key-review/</link><pubDate>Wed, 01 Apr 2020 07:00:00 +0000</pubDate><guid>https://xiking.win/2020/04/01/redis-expire-key-review/</guid><description>在Redis中，数据的过期可分为两种，一种是主动过期淘汰，一种是lazy方式淘汰。 主动过期淘汰就是在Redis中定时任务主动对数据进行采样，</description></item><item><title>数据仓库Snowflake论文</title><link>https://xiking.win/2020/01/15/snowflake-data-warehouse/</link><pubDate>Wed, 15 Jan 2020 17:53:38 +0000</pubDate><guid>https://xiking.win/2020/01/15/snowflake-data-warehouse/</guid><description>数据仓库和数据库的区别就是： 数据库：OLTP，数据操作会包含读写，并且要求时延较低，操作结果会是决定上层操作成功与否的关键。数据量一般有限。</description></item><item><title>RocksDB参数调优</title><link>https://xiking.win/2018/12/05/rocksdb-tuning/</link><pubDate>Wed, 05 Dec 2018 17:58:49 +0000</pubDate><guid>https://xiking.win/2018/12/05/rocksdb-tuning/</guid><description>RocksDB对比LevelDB暴露了很多参数来适应更多的应用场景，带来的好处就是可以通过tuning使系统性能达到最大，当然，如果tuni</description></item><item><title>Redis冷热数据分离混合存储实现 - IO任务异步处理</title><link>https://xiking.win/2018/10/24/redis-bot-cold-data-seperation-new-bio/</link><pubDate>Wed, 24 Oct 2018 16:33:03 +0000</pubDate><guid>https://xiking.win/2018/10/24/redis-bot-cold-data-seperation-new-bio/</guid><description>在demo实现中，第一版的异步化处理中，采用的是类似redis中对list的BLOCK类型操作，但是与list BLOCK操作不同的是，lis</description></item><item><title>Redis冷热数据分离混合存储实现 - 读写任务异步化</title><link>https://xiking.win/2018/09/30/redis-hot-cold-data-seperation-bio/</link><pubDate>Sun, 30 Sep 2018 17:59:14 +0000</pubDate><guid>https://xiking.win/2018/09/30/redis-hot-cold-data-seperation-bio/</guid><description>redis的单线程处理模型，对于客户端请求都会变成串行处理，所以也不存在数据竞争的问题。对于冷数据需要的经过磁盘IO，这对于redis的高并</description></item><item><title>Redis冷热数据分离混合存储实现 - index存储</title><link>https://xiking.win/2018/09/20/redis-hot-cold-data-seperation-index/</link><pubDate>Thu, 20 Sep 2018 18:04:45 +0000</pubDate><guid>https://xiking.win/2018/09/20/redis-hot-cold-data-seperation-index/</guid><description>为了实现冷热数据分离，热数据在内存，冷数据会置换到持久化存储，但是为了保证内存检索高效，会将所有key和频率统计信息保存在内存。冷数据的选择</description></item><item><title>冷热数据分离调研和概要方案</title><link>https://xiking.win/2018/09/13/data-hot-cold-auto-management/</link><pubDate>Thu, 13 Sep 2018 11:36:47 +0000</pubDate><guid>https://xiking.win/2018/09/13/data-hot-cold-auto-management/</guid><description>一. 背景 随着硬件的发展，持久化存储的速度得以提升，但是硬件成本相比内存单位的成本会有大幅度下降，并且全内存缓存存储理想应用场景是随机高速访问</description></item><item><title>对数据冷热分离存储的思考</title><link>https://xiking.win/2018/09/06/hot-and-cold-data-separation-storage/</link><pubDate>Thu, 06 Sep 2018 23:54:21 +0000</pubDate><guid>https://xiking.win/2018/09/06/hot-and-cold-data-separation-storage/</guid><description>对于冷热数据分层存储的最直接的目的就是节省成本，计算机结构里，内存-&amp;gt;nvme ssd-&amp;gt;ssd-&amp;gt;机械盘，访问速度依次降低</description></item><item><title>LevelDB中snapshot和compaction</title><link>https://xiking.win/2018/08/03/leveldb-key-snapshot-compaction/</link><pubDate>Fri, 03 Aug 2018 19:23:54 +0000</pubDate><guid>https://xiking.win/2018/08/03/leveldb-key-snapshot-compaction/</guid><description>本文简单记录了leveldb中有关key的种类、memtable的操作、snapshot的原理和Compaction。 Key LookupKey: klength|UserKey|tag InternalKey: UserKey</description></item><item><title>LevelDB版本管理和读写操作</title><link>https://xiking.win/2018/08/01/leveldb-mvcc-read-write-put-delete/</link><pubDate>Wed, 01 Aug 2018 20:07:32 +0000</pubDate><guid>https://xiking.win/2018/08/01/leveldb-mvcc-read-write-put-delete/</guid><description>LevelDB是一个轻量级的key value存储系统，存储结构采用LSM-Tree，对写操作优化，特别是普通的机械盘。 LevelDB是Big</description></item></channel></rss>